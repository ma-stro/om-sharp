
(:patch
 (:name "collect")
 (:doc "")
 (:info
  (:created "2019/08/13 16:01:58")
  (:modified "2020/03/23 23:46:42")
  (:by "om-sharp")
  (:version 1.0))
 (:window (:size (1148 690)) (:position (313 23)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:box
   (:type :interface)
   (:reference slider)
   (:group-id nil)
   (:name "slider")
   (:x 546)
   (:y 106)
   (:w 46)
   (:h 88)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:min-value 50)
   (:max-value 80)
   (:increment 1)
   (:decimals 0)
   (:orientation :vertical)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive t)))
   (:value 66)
   (:id 0))
  (:box
   (:type :object)
   (:reference chord-seq)
   (:group-id nil)
   (:name nil)
   (:x 579)
   (:y 463)
   (:w 305)
   (:h 92)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:showname nil)
   (:show-markers t)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LMIDIC")
     (:value (:list (:list 6000)))
     (:reactive t))
    (:input
     (:type :standard)
     (:name "LONSET")
     (:value (:list 0 1000))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LDUR")
     (:value (:list (:list 1000)))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LVEL")
     (:value 100)
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "LMIDIC") (:reactive nil))
    (:output (:name "LONSET") (:reactive nil))
    (:output (:name "LDUR") (:reactive nil))
    (:output (:name "LVEL") (:reactive nil)))
   (:window (:size (896 383)) (:position (356 368)))
   (:edition-params)
   (:value
    (:object
     (:class chord-seq)
     (:slots
      ((:onset 0)
       (:duration 2347)
       (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
       (:name "CHORD-SEQ")
       (:symbolic-date nil)
       (:symbolic-dur nil)
       (:symbolic-dur-extent 0)
       (:extras nil)
       (:lmidic
        (:list
         (:list 6500)
         (:list 5900 6000 6400)
         (:list 5400 5500 5600 5700)
         (:list 6300 6200 5500)
         (:list 7900 7800 7200 7100)
         (:list 6200 7100 7800)
         (:list 5000 5100 5500 6100)
         (:list 6400 6200 5200 5100)
         (:list 8000 7600)
         (:list 7000 7800 7900)
         (:list 6600)))
       (:lonset
        (:list 0 105 209 375 477 662 766 991 1095 1239 1347 2347))
       (:ldur
        (:list
         (:list 1000)
         (:list 1000 1000 1000)
         (:list 1000 1000 1000 1000)
         (:list 1000 1000 1000)
         (:list 1000 1000 1000 1000)
         (:list 1000 1000 1000)
         (:list 1000 1000 1000 1000)
         (:list 1000 1000 1000 1000)
         (:list 1000 1000)
         (:list 1000 1000 1000)
         (:list 1000)))
       (:lvel
        (:list
         (:list 100)
         (:list 100 100 100)
         (:list 100 100 100 100)
         (:list 100 100 100)
         (:list 100 100 100 100)
         (:list 100 100 100)
         (:list 100 100 100 100)
         (:list 100 100 100 100)
         (:list 100 100)
         (:list 100 100 100)
         (:list 100)))
       (:loffset
        (:list
         (:list 0)
         (:list 0 0 0)
         (:list 0 0 0 0)
         (:list 0 0 0)
         (:list 0 0 0 0)
         (:list 0 0 0)
         (:list 0 0 0 0)
         (:list 0 0 0 0)
         (:list 0 0)
         (:list 0 0 0)
         (:list 0)))
       (:lchan
        (:list
         (:list 1)
         (:list 1 1 1)
         (:list 1 1 1 1)
         (:list 1 1 1)
         (:list 1 1 1 1)
         (:list 1 1 1)
         (:list 1 1 1 1)
         (:list 1 1 1 1)
         (:list 1 1)
         (:list 1 1 1)
         (:list 1)))
       (:lport
        (:list
         (:list nil)
         (:list nil nil nil)
         (:list nil nil nil nil)
         (:list nil nil nil)
         (:list nil nil nil nil)
         (:list nil nil nil)
         (:list nil nil nil nil)
         (:list nil nil nil nil)
         (:list nil nil)
         (:list nil nil nil)
         (:list nil)))
       (:llegato nil)))))
   (:id 1))
  (:box
   (:type :function)
   (:reference om*)
   (:group-id nil)
   (:name "om*")
   (:x 577)
   (:y 207)
   (:w 60)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input (:type :standard) (:name "ARG1") (:value 0) (:reactive t))
    (:input
     (:type :standard)
     (:name "ARG2")
     (:value 100)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive t)))
   (:id 2))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 601)
   (:y 171)
   (:w 36)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 100)
   (:id 3))
  (:box
   (:type :interface)
   (:reference button)
   (:group-id nil)
   (:name "button")
   (:x 710)
   (:y 193)
   (:w 49)
   (:h 36)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:send-value t)
   (:text "INIT")
   (:inputs)
   (:outputs (:output (:name "value") (:reactive t)))
   (:value nil)
   (:id 4))
  (:box
   (:type :special)
   (:reference or)
   (:group-id nil)
   (:name "OR")
   (:x 642)
   (:y 253)
   (:w 64)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "test-forms")
     (:value nil)
     (:reactive t))
    (:input
     (:type :optional)
     (:name "test-forms")
     (:value nil)
     (:reactive t)))
   (:outputs (:output (:name "out") (:reactive t)))
   (:id 5))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 694)
   (:y 325)
   (:w 36)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 100)
   (:id 6))
  (:comment
   (:x 737)
   (:y 340)
   (:w 122)
   (:h 52)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text
    "<= interval max (ms) to group incoming values in a same chord")
   (:id 7))
  (:comment
   (:x 95)
   (:y 34)
   (:w 472)
   (:h 27)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border (:number-or-nil (:number 0.0) (:t-or-nil t)))
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Calibri") (:size 16) (:style :bold)))
     (:t-or-nil t)))
   (:align nil)
   (:text
    "COLLECT/TCOLLECT: collect data in Loops or in reactive patches")
   (:id 8))
  (:box
   (:type :interface)
   (:reference slider)
   (:group-id nil)
   (:name "slider")
   (:x 186)
   (:y 160)
   (:w 34)
   (:h 95)
   (:color nil)
   (:border (:number-or-nil (:number 1.5) (:t-or-nil t)))
   (:roundness (:number-or-nil (:number 6) (:t-or-nil t)))
   (:min-value 0)
   (:max-value 100)
   (:increment 1)
   (:decimals 0)
   (:orientation :vertical)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive t)))
   (:value 45)
   (:id 9))
  (:box
   (:type :interface)
   (:reference button)
   (:group-id nil)
   (:name "button")
   (:x 3247/12)
   (:y 222)
   (:w 69)
   (:h 28)
   (:color (:color-or-nil (:color nil) (:t-or-nil nil)))
   (:border (:number-or-nil (:number 1.5) (:t-or-nil t)))
   (:roundness (:number-or-nil (:number 3) (:t-or-nil t)))
   (:send-value t)
   (:text "Init")
   (:inputs)
   (:outputs (:output (:name "value") (:reactive t)))
   (:value nil)
   (:id 10))
  (:box
   (:type :object)
   (:reference bpf)
   (:group-id nil)
   (:name nil)
   (:x 87)
   (:y 843/2)
   (:w 229)
   (:h 73)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 10) (:style :italic)))
   (:align :center)
   (:display :mini-view)
   (:showname nil)
   (:show-markers t)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "X-POINTS")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "Y-POINTS")
     (:value (:list 0 100))
     (:reactive t)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "X-POINTS") (:reactive nil))
    (:output (:name "Y-POINTS") (:reactive nil)))
   (:window (:size (nil nil)) (:position (nil nil)))
   (:edition-params)
   (:value
    (:object
     (:class bpf)
     (:slots
      ((:onset 0)
       (:duration 45.0)
       (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
       (:action nil)
       (:color (:color 0.0 0.0 0.0 1.0))
       (:decimals 2)
       (:x-points
        (:list
         0.0
         1.0
         2.0
         3.0
         4.0
         5.0
         6.0
         7.0
         8.0
         9.0
         10.0
         11.0
         12.0
         13.0
         14.0
         15.0
         16.0
         17.0
         18.0
         19.0
         20.0
         21.0
         22.0
         23.0
         24.0
         25.0
         26.0
         27.0
         28.0
         29.0
         30.0
         31.0
         32.0
         33.0
         34.0
         35.0
         36.0
         37.0
         38.0
         39.0
         40.0
         41.0
         42.0
         43.0
         44.0
         45.0))
       (:y-points
        (:list
         42.0
         40.0
         38.0
         35.0
         34.0
         33.0
         31.0
         30.0
         28.0
         26.0
         25.0
         24.0
         23.0
         20.0
         19.0
         18.0
         31.0
         30.0
         28.0
         26.0
         25.0
         23.0
         22.0
         21.0
         20.0
         19.0
         38.0
         37.0
         36.0
         35.0
         32.0
         31.0
         29.0
         28.0
         27.0
         26.0
         27.0
         34.0
         35.0
         38.0
         39.0
         40.0
         42.0
         43.0
         44.0
         45.0))))
     (:add-slots ((:name "BPF")))))
   (:id 11))
  (:box
   (:type :special)
   (:reference or)
   (:group-id nil)
   (:name "OR")
   (:x 239)
   (:y 317)
   (:w 64)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "test-forms")
     (:value nil)
     (:reactive t))
    (:input
     (:type :optional)
     (:name "test-forms")
     (:value nil)
     (:reactive t)))
   (:outputs (:output (:name "out") (:reactive t)))
   (:id 12))
  (:box
   (:type :special)
   (:reference collect)
   (:group-id nil)
   (:name "collect")
   (:x 204)
   (:y 715/2)
   (:w 125)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 0.82 0.7 0.7 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:inputs
    (:input
     (:type :standard)
     (:name "data-in")
     (:value nil)
     (:reactive t))
    (:input
     (:type :standard)
     (:name "push")
     (:value nil)
     (:reactive t))
    (:input
     (:type :standard)
     (:name "init")
     (:value nil)
     (:reactive t)))
   (:outputs
    (:output (:name "collect") (:reactive nil))
    (:output (:name "data-out") (:reactive t))
    (:output (:name "init") (:reactive nil)))
   (:id 13))
  (:comment
   (:x 57)
   (:y 576)
   (:w 144)
   (:h 39)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text "See also LOOP-patches for more details and use cases")
   (:id 14))
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:name "loop-with-collect")
     (:doc "")
     (:info (:created nil) (:modified nil) (:by nil) (:version nil))
     (:window (:size (697 418)) (:position (781 290)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "out") (:index 1) (:doc "")))
       (:group-id nil)
       (:name "out")
       (:x 165)
       (:y 336)
       (:w 40)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 0))
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 1) (:name "in") (:doc "")))
       (:group-id nil)
       (:name "in")
       (:x 91)
       (:y 61)
       (:w 40)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :optional)
         (:name "internal input value")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 1))
      (:box
       (:type :special)
       (:reference collect)
       (:group-id nil)
       (:name "collect")
       (:x 89)
       (:y 233)
       (:w 111)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.7 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "data-in")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "push")
         (:value t)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "init")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "collect") (:reactive nil))
        (:output (:name "data-out") (:reactive nil))
        (:output (:name "init") (:reactive nil)))
       (:id 2))
      (:box
       (:type :value)
       (:reference cons)
       (:group-id nil)
       (:name "value box")
       (:x 62)
       (:y 18)
       (:w 58)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value (:list 6 7 8 9))
       (:id 3))
      (:box
       (:type :special)
       (:reference iterate)
       (:group-id nil)
       (:name "iterate")
       (:x 83)
       (:y 333)
       (:w 57)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "action")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 4))
      (:box
       (:type :function)
       (:reference om*)
       (:group-id nil)
       (:name "om*")
       (:x 141)
       (:y 168)
       (:w 60)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "ARG1")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "ARG2")
         (:value 0)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 5))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 167)
       (:y 133)
       (:w 32)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 2)
       (:id 6))
      (:comment
       (:x 152)
       (:y 16)
       (:w 120)
       (:h 53)
       (:fgcolor nil)
       (:bgcolor nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:text
        "<= default value for the input: test your loop \"from inside\"")
       (:id 7))
      (:comment
       (:x 237)
       (:y 219)
       (:w 139)
       (:h 64)
       (:fgcolor nil)
       (:bgcolor nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:text
        "PULL collect outputs to
1) collect a value
2) read the collect memory
3) reinitialize the memory ")
       (:id 8))
      (:box
       (:type :special)
       (:reference loop-list)
       (:group-id nil)
       (:name "list-loop")
       (:x 79)
       (:y 109)
       (:w 65)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "list")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "i") (:reactive nil)))
       (:id 9)))
     (:connections
      (:connection (:from (:box 1 :out 0)) (:to (:box 9 :in 0)))
      (:connection (:from (:box 2 :out 0)) (:to (:box 4 :in 0)))
      (:connection (:from (:box 2 :out 1)) (:to (:box 0 :in 0)))
      (:connection (:from (:box 3 :out 0)) (:to (:box 1 :in 0)))
      (:connection (:from (:box 5 :out 0)) (:to (:box 2 :in 0)))
      (:connection (:from (:box 6 :out 0)) (:to (:box 5 :in 1)))
      (:connection (:from (:box 9 :out 0)) (:to (:box 5 :in 0))))))
   (:group-id nil)
   (:name "loop-with-collect")
   (:x 230)
   (:y 535)
   (:w 121)
   (:h 105)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "in")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 15))
  (:box
   (:type :value)
   (:reference symbol)
   (:group-id nil)
   (:name "value box")
   (:x 370)
   (:y 308)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive t)))
   (:value t)
   (:id 16))
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:name "loop-with-timed-collect")
     (:doc "")
     (:info (:created nil) (:modified nil) (:by nil) (:version nil))
     (:window (:size (626 454)) (:position (110 266)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "out") (:index 1) (:doc "")))
       (:group-id nil)
       (:name "out")
       (:x 311)
       (:y 312)
       (:w 40)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 0))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "out") (:index 2) (:doc "")))
       (:group-id nil)
       (:name "out")
       (:x 357)
       (:y 312)
       (:w 40)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 1))
      (:box
       (:type :special)
       (:reference iterate)
       (:group-id nil)
       (:name "iterate")
       (:x 120)
       (:y 306)
       (:w 142)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "action")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "action")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "action")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 2))
      (:comment
       (:x 397)
       (:y 139)
       (:w 141)
       (:h 78)
       (:fgcolor nil)
       (:bgcolor nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:text
        "PULL collect outputs to
1) collect a value
2) read the collect memory
3) reinitialize the memory 
4) collect the lime-list")
       (:id 3))
      (:box
       (:type :special)
       (:reference loop-for)
       (:group-id nil)
       (:name "for")
       (:x 43)
       (:y 189)
       (:w 66)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "from")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "to")
         (:value 200)
         (:reactive nil)))
       (:outputs (:output (:name "i") (:reactive nil)))
       (:id 4))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 65)
       (:y 154)
       (:w 36)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 10)
       (:id 5))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 26)
       (:y 154)
       (:w 32)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 1)
       (:id 6))
      (:box
       (:type :function)
       (:reference sleep)
       (:group-id nil)
       (:name "sleep")
       (:x 154)
       (:y 206)
       (:w 64)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "TIME")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 7))
      (:box
       (:type :function)
       (:reference om-random)
       (:group-id nil)
       (:name "om-random")
       (:x 138)
       (:y 168)
       (:w 96)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LOW")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "HIGH")
         (:value 1)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 8))
      (:box
       (:type :value)
       (:reference single-float)
       (:group-id nil)
       (:name "value box")
       (:x 192)
       (:y 133)
       (:w 33)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 0.5)
       (:id 9))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 148)
       (:y 133)
       (:w 32)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 0)
       (:id 10))
      (:box
       (:type :value)
       (:reference symbol)
       (:group-id nil)
       (:name "value box")
       (:x 296)
       (:y 80)
       (:w 32)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value a)
       (:id 11))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 347)
       (:y 80)
       (:w 42)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 1000)
       (:id 12))
      (:box
       (:type :function)
       (:reference print)
       (:group-id nil)
       (:name "print")
       (:x 40)
       (:y 255)
       (:w 62)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SOMETHING")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 13))
      (:comment
       (:x 268)
       (:y 36)
       (:w 169)
       (:h 34)
       (:fgcolor nil)
       (:bgcolor nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:text "COLLECTS IN CHUNKS OF 1000 ms computation time-windows")
       (:id 14))
      (:box
       (:type :special)
       (:reference tcollect)
       (:group-id nil)
       (:name "tcollect")
       (:x 298)
       (:y 148)
       (:w 84)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.7 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "data-in")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "push")
         (:value t)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "init")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "delay")
         (:value 0)
         (:reactive nil)))
       (:outputs
        (:output (:name "collect") (:reactive nil))
        (:output (:name "data-out") (:reactive nil))
        (:output (:name "init") (:reactive nil))
        (:output (:name "time-list") (:reactive nil)))
       (:id 15)))
     (:connections
      (:connection (:from (:box 4 :out 0)) (:to (:box 13 :in 0)))
      (:connection (:from (:box 5 :out 0)) (:to (:box 4 :in 1)))
      (:connection (:from (:box 6 :out 0)) (:to (:box 4 :in 0)))
      (:connection (:from (:box 7 :out 0)) (:to (:box 2 :in 1)))
      (:connection (:from (:box 8 :out 0)) (:to (:box 7 :in 0)))
      (:connection (:from (:box 9 :out 0)) (:to (:box 8 :in 1)))
      (:connection (:from (:box 10 :out 0)) (:to (:box 8 :in 0)))
      (:connection (:from (:box 11 :out 0)) (:to (:box 15 :in 0)))
      (:connection (:from (:box 12 :out 0)) (:to (:box 15 :in 3)))
      (:connection (:from (:box 13 :out 0)) (:to (:box 2 :in 0)))
      (:connection (:from (:box 15 :out 0)) (:to (:box 2 :in 2)))
      (:connection (:from (:box 15 :out 1)) (:to (:box 0 :in 0)))
      (:connection (:from (:box 15 :out 2)) (:to (:box 1 :in 0))))))
   (:group-id nil)
   (:name "loop-with-timed-collect")
   (:x 919)
   (:y 379)
   (:w 153)
   (:h 105)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs)
   (:outputs
    (:output (:name "out") (:reactive nil))
    (:output (:name "out") (:reactive nil)))
   (:id 17))
  (:comment
   (:x 610)
   (:y 109)
   (:w 126)
   (:h 38)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text "... best with a MIDI-IN or OSC-RECEIVE...")
   (:id 18))
  (:box
   (:type :function)
   (:reference seq)
   (:group-id nil)
   (:name "seq")
   (:x 291)
   (:y 260)
   (:w 55)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input (:type :standard) (:name "OP") (:value nil) (:reactive t))
    (:input
     (:type :optional)
     (:name "op+")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "out") (:reactive t))
    (:output (:name "op+1") (:reactive t)))
   (:id 19))
  (:box
   (:type :function)
   (:reference seq)
   (:group-id nil)
   (:name "seq")
   (:x 189)
   (:y 266)
   (:w 55)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input (:type :standard) (:name "OP") (:value nil) (:reactive t))
    (:input
     (:type :optional)
     (:name "op+")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "out") (:reactive t))
    (:output (:name "op+1") (:reactive t)))
   (:id 20))
  (:box
   (:type :function)
   (:reference seq)
   (:group-id nil)
   (:name "seq")
   (:x 720)
   (:y 237)
   (:w 55)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input (:type :standard) (:name "OP") (:value nil) (:reactive t))
    (:input
     (:type :optional)
     (:name "op+")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "out") (:reactive t))
    (:output (:name "op+1") (:reactive t)))
   (:id 21))
  (:box
   (:type :function)
   (:reference seq)
   (:group-id nil)
   (:name "seq")
   (:x 544)
   (:y 244)
   (:w 55)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input (:type :standard) (:name "OP") (:value nil) (:reactive t))
    (:input
     (:type :optional)
     (:name "op+")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "out") (:reactive t))
    (:output (:name "op+1") (:reactive t)))
   (:id 22))
  (:box
   (:type :special)
   (:reference tcollect)
   (:group-id nil)
   (:name "tcollect")
   (:x 631)
   (:y 366)
   (:w 97)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 0.82 0.7 0.7 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:inputs
    (:input
     (:type :standard)
     (:name "data-in")
     (:value nil)
     (:reactive t))
    (:input (:type :standard) (:name "push") (:value t) (:reactive t))
    (:input
     (:type :standard)
     (:name "init")
     (:value nil)
     (:reactive t))
    (:input
     (:type :standard)
     (:name "delay")
     (:value 0)
     (:reactive nil)))
   (:outputs
    (:output (:name "collect") (:reactive nil))
    (:output (:name "data-out") (:reactive t))
    (:output (:name "init") (:reactive nil))
    (:output (:name "time-list") (:reactive nil)))
   (:id 23)))
 (:connections
  (:connection (:from (:box 0 :out 0)) (:to (:box 2 :in 0)))
  (:connection (:from (:box 2 :out 0)) (:to (:box 22 :in 0)))
  (:connection (:from (:box 3 :out 0)) (:to (:box 2 :in 1)))
  (:connection (:from (:box 4 :out 0)) (:to (:box 21 :in 0)))
  (:connection (:from (:box 5 :out 0)) (:to (:box 23 :in 1)))
  (:connection (:from (:box 6 :out 0)) (:to (:box 23 :in 3)))
  (:connection (:from (:box 9 :out 0)) (:to (:box 20 :in 0)))
  (:connection (:from (:box 10 :out 0)) (:to (:box 19 :in 0)))
  (:connection (:from (:box 12 :out 0)) (:to (:box 13 :in 1)))
  (:connection
   (:from (:box 13 :out 1))
   (:to (:box 11 :in 2))
   (:attributes (:color nil :style nil :modif (0 0))))
  (:connection (:from (:box 19 :out 0)) (:to (:box 13 :in 2)))
  (:connection (:from (:box 19 :out 1)) (:to (:box 12 :in 1)))
  (:connection (:from (:box 20 :out 0)) (:to (:box 13 :in 0)))
  (:connection (:from (:box 20 :out 1)) (:to (:box 12 :in 0)))
  (:connection (:from (:box 21 :out 0)) (:to (:box 23 :in 2)))
  (:connection (:from (:box 21 :out 1)) (:to (:box 5 :in 1)))
  (:connection (:from (:box 22 :out 0)) (:to (:box 23 :in 0)))
  (:connection (:from (:box 22 :out 1)) (:to (:box 5 :in 0)))
  (:connection (:from (:box 23 :out 1)) (:to (:box 1 :in 1)))
  (:connection (:from (:box 23 :out 3)) (:to (:box 1 :in 2)))))