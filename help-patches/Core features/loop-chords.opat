
(:patch
 (:name "loop-chords")
 (:doc "")
 (:info
  (:created "2019/09/21 22:06:00")
  (:modified "2020/01/02 8:45:59")
  (:by "om-sharp")
  (:version 1.0))
 (:window (:size (994 548)) (:position (306 247)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:name "make-chords-loop")
     (:doc "")
     (:info (:created nil) (:modified nil) (:by nil) (:version nil))
     (:window (:size (283 399)) (:position (647 245)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 1) (:name "pitches") (:doc "")))
       (:group-id nil)
       (:name "pitches")
       (:x 50)
       (:y 39)
       (:w 60)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 0))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "out") (:index 1) (:doc "")))
       (:group-id nil)
       (:name "out")
       (:x 134)
       (:y 296)
       (:w 40)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 1))
      (:box
       (:type :function)
       (:reference om+)
       (:group-id nil)
       (:name "om+")
       (:x 105)
       (:y 168)
       (:w 60)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "ARG1")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "ARG2")
         (:value 0)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 2))
      (:box
       (:type :special)
       (:reference iterate)
       (:group-id nil)
       (:name "iterate")
       (:x 50)
       (:y 294)
       (:w 57)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "action")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 3))
      (:box
       (:type :special)
       (:reference collect)
       (:group-id nil)
       (:name "collect")
       (:x 96)
       (:y 217)
       (:w 57)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.7 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "data-in")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "push")
         (:value t)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "init")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "collect") (:reactive nil))
        (:output (:name "data-out") (:reactive nil))
        (:output (:name "init") (:reactive nil)))
       (:id 4))
      (:box
       (:type :special)
       (:reference loop-list)
       (:group-id nil)
       (:name "list-loop")
       (:x 48)
       (:y 100)
       (:w 65)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "list")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "i") (:reactive nil)))
       (:id 5))
      (:box
       (:type :value)
       (:reference cons)
       (:group-id nil)
       (:name "value box")
       (:x 141)
       (:y 122)
       (:w 79)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value (:list 0 500 1200))
       (:id 6)))
     (:connections
      (:connection (:from (:box 0 :out 0)) (:to (:box 5 :in 0)))
      (:connection (:from (:box 2 :out 0)) (:to (:box 4 :in 0)))
      (:connection (:from (:box 4 :out 0)) (:to (:box 3 :in 0)))
      (:connection (:from (:box 4 :out 1)) (:to (:box 1 :in 0)))
      (:connection (:from (:box 5 :out 0)) (:to (:box 2 :in 0)))
      (:connection (:from (:box 6 :out 0)) (:to (:box 2 :in 1))))))
   (:group-id nil)
   (:name "make-chords-loop")
   (:x 164)
   (:y 242)
   (:w 127)
   (:h 90)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "pitches")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 0))
  (:box
   (:type :object)
   (:reference chord-seq)
   (:group-id nil)
   (:name nil)
   (:x 87)
   (:y 46)
   (:w 199)
   (:h 98)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:showname nil)
   (:show-markers t)
   (:lock :locked)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LMIDIC")
     (:value (:list (:list 6000)))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LONSET")
     (:value (:list 0 1000))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LDUR")
     (:value (:list (:list 1000)))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LVEL")
     (:value 100)
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "LMIDIC") (:reactive nil))
    (:output (:name "LONSET") (:reactive nil))
    (:output (:name "LDUR") (:reactive nil))
    (:output (:name "LVEL") (:reactive nil)))
   (:window (:size (650 300)) (:position (106 92)))
   (:edition-params (:duration-display t))
   (:value
    (:object
     (:class chord-seq)
     (:slots
      ((:onset 0)
       (:duration 1611)
       (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
       (:name "CHORD-SEQ")
       (:symbolic-date nil)
       (:symbolic-dur nil)
       (:symbolic-dur-extent 0)
       (:extras nil)
       (:lmidic
        (:list
         (:list 6000)
         (:list 8200)
         (:list 5900)
         (:list 7700)
         (:list 6500)
         (:list 7900)
         (:list 7900)))
       (:lonset (:list 0 170 378 552 767 1032 1411 1611))
       (:ldur (:list 200))
       (:lvel
        (:list
         (:list 100)
         (:list 80)
         (:list 80)
         (:list 80)
         (:list 80)
         (:list 80)
         (:list 80)))
       (:loffset (:list 0))
       (:lchan (:list 1))
       (:lport (:list nil))
       (:llegato nil)))))
   (:id 1))
  (:box
   (:type :object)
   (:reference chord-seq)
   (:group-id nil)
   (:name nil)
   (:x 71)
   (:y 359)
   (:w 363)
   (:h 110)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:showname nil)
   (:show-markers t)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LMIDIC")
     (:value (:list (:list 6000)))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LONSET")
     (:value (:list 0 1000))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LDUR")
     (:value (:list (:list 1000)))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LVEL")
     (:value 100)
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "LMIDIC") (:reactive nil))
    (:output (:name "LONSET") (:reactive nil))
    (:output (:name "LDUR") (:reactive nil))
    (:output (:name "LVEL") (:reactive nil)))
   (:window (:size (574 417)) (:position (210 207)))
   (:edition-params)
   (:value
    (:object
     (:class chord-seq)
     (:slots
      ((:onset 0)
       (:duration 1611)
       (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
       (:name "CHORD-SEQ")
       (:symbolic-date nil)
       (:symbolic-dur nil)
       (:symbolic-dur-extent 0)
       (:extras nil)
       (:lmidic
        (:list
         (:list 6000 6500 7200)
         (:list 8200 8700 9400)
         (:list 5900 6400 7100)
         (:list 7700 8200 8900)
         (:list 6500 7000 7700)
         (:list 7900 8400 9100)
         (:list 7900 8400 9100)))
       (:lonset (:list 0 170 378 552 767 1032 1411 1611))
       (:ldur (:list 200 200 200))
       (:lvel
        (:list
         (:list 100 100 100)
         (:list 80 80 80)
         (:list 80 80 80)
         (:list 80 80 80)
         (:list 80 80 80)
         (:list 80 80 80)
         (:list 80 80 80)))
       (:loffset (:list 0 0 0))
       (:lchan (:list 1 1 1))
       (:lport (:list nil nil nil))
       (:llegato nil)))))
   (:id 2))
  (:comment
   (:x 672)
   (:y 186)
   (:w 165)
   (:h 40)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text "Often MAPCAR is just as simple (or easier) than a loop....")
   (:id 3))
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:name "make-one-chord")
     (:doc "")
     (:info (:created nil) (:modified nil) (:by nil) (:version nil))
     (:window (:size (362 340)) (:position (190 184)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 1) (:name "pitches") (:doc "")))
       (:group-id nil)
       (:name "pitches")
       (:x 41)
       (:y 143)
       (:w 60)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 0))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "out") (:index 1) (:doc "")))
       (:group-id nil)
       (:name "out")
       (:x 107)
       (:y 254)
       (:w 40)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 1))
      (:box
       (:type :io)
       (:reference
        (:in (:type omin) (:index 2) (:name "chord-size") (:doc "")))
       (:group-id nil)
       (:name "chord-size")
       (:x 217)
       (:y 113)
       (:w 76)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 2))
      (:box
       (:type :function)
       (:reference om+)
       (:group-id nil)
       (:name "om+")
       (:x 97)
       (:y 203)
       (:w 60)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "ARG1")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "ARG2")
         (:value 0)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 3))
      (:box
       (:type :special)
       (:reference repeat-n)
       (:group-id nil)
       (:name "repeat-n")
       (:x 161)
       (:y 157)
       (:w 90)
       (:h 28)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :left)
       (:lock nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "self")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "num")
         (:value 0)
         (:reactive nil)))
       (:outputs (:output (:name "collected results") (:reactive nil)))
       (:id 4))
      (:box
       (:type :function)
       (:reference om-random)
       (:group-id nil)
       (:name "om-random")
       (:x 87)
       (:y 57)
       (:w 96)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LOW")
         (:value 1)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "HIGH")
         (:value 12)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 5))
      (:box
       (:type :function)
       (:reference om*)
       (:group-id nil)
       (:name "om*")
       (:x 117)
       (:y 125)
       (:w 60)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "ARG1")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "ARG2")
         (:value 100)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 6))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 141)
       (:y 93)
       (:w 36)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 100)
       (:id 7))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 97)
       (:y 22)
       (:w 32)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 1)
       (:id 8))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 141)
       (:y 22)
       (:w 32)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 24)
       (:id 9)))
     (:connections
      (:connection (:from (:box 0 :out 0)) (:to (:box 3 :in 0)))
      (:connection (:from (:box 2 :out 0)) (:to (:box 4 :in 1)))
      (:connection (:from (:box 3 :out 0)) (:to (:box 1 :in 0)))
      (:connection (:from (:box 4 :out 0)) (:to (:box 3 :in 1)))
      (:connection (:from (:box 5 :out 0)) (:to (:box 6 :in 0)))
      (:connection (:from (:box 6 :out 0)) (:to (:box 4 :in 0)))
      (:connection (:from (:box 7 :out 0)) (:to (:box 6 :in 1)))
      (:connection (:from (:box 8 :out 0)) (:to (:box 5 :in 0)))
      (:connection (:from (:box 9 :out 0)) (:to (:box 5 :in 1))))))
   (:group-id nil)
   (:name "make-one-chord")
   (:x 529)
   (:y 121)
   (:w 136)
   (:h 50)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:lock nil)
   (:lambda :lambda)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "pitches")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "chord-size")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 4))
  (:box
   (:type :function)
   (:reference mapcar)
   (:group-id nil)
   (:name "mapcar")
   (:x 572)
   (:y 247)
   (:w 100)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "FUNCTION")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LIST")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 5))
  (:box
   (:type :object)
   (:reference chord-seq)
   (:group-id nil)
   (:name nil)
   (:x 509)
   (:y 285)
   (:w 363)
   (:h 109)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:showname nil)
   (:show-markers t)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LMIDIC")
     (:value (:list (:list 6000)))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LONSET")
     (:value (:list 0 1000))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LDUR")
     (:value (:list (:list 1000)))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LVEL")
     (:value 100)
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "LMIDIC") (:reactive nil))
    (:output (:name "LONSET") (:reactive nil))
    (:output (:name "LDUR") (:reactive nil))
    (:output (:name "LVEL") (:reactive nil)))
   (:window (:size (nil nil)) (:position (nil nil)))
   (:edition-params)
   (:value
    (:object
     (:class chord-seq)
     (:slots
      ((:onset 0)
       (:duration 1611)
       (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
       (:name "CHORD-SEQ")
       (:symbolic-date nil)
       (:symbolic-dur nil)
       (:symbolic-dur-extent 0)
       (:extras nil)
       (:lmidic
        (:list
         (:list 7200)
         (:list 10200 10500)
         (:list 6200 7400 7600 6300)
         (:list 9700 7900 7900 8900 7900)
         (:list 6700 7700 8400 8900)
         (:list 8600 8600 10000)
         (:list 10100)))
       (:lonset (:list 0 170 378 552 767 1032 1411 1611))
       (:ldur
        (:list
         (:list 200)
         (:list 200 200)
         (:list 200 200 200 200)
         (:list 200 200 200 200 200)
         (:list 200 200 200 200)
         (:list 200 200 200)
         (:list 200)))
       (:lvel
        (:list
         (:list 100)
         (:list 80 80)
         (:list 80 80 80 80)
         (:list 80 80 80 80 80)
         (:list 80 80 80 80)
         (:list 80 80 80)
         (:list 80)))
       (:loffset
        (:list
         (:list 0)
         (:list 0 0)
         (:list 0 0 0 0)
         (:list 0 0 0 0 0)
         (:list 0 0 0 0)
         (:list 0 0 0)
         (:list 0)))
       (:lchan
        (:list
         (:list 1)
         (:list 1 1)
         (:list 1 1 1 1)
         (:list 1 1 1 1 1)
         (:list 1 1 1 1)
         (:list 1 1 1)
         (:list 1)))
       (:lport
        (:list
         (:list nil)
         (:list nil nil)
         (:list nil nil nil nil)
         (:list nil nil nil nil nil)
         (:list nil nil nil nil)
         (:list nil nil nil)
         (:list nil)))
       (:llegato nil)))))
   (:id 6))
  (:box
   (:type :function)
   (:reference flat)
   (:group-id nil)
   (:name "flat")
   (:x 201)
   (:y 175)
   (:w 54)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "LST")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 7)))
 (:connections
  (:connection (:from (:box 0 :out 0)) (:to (:box 2 :in 1)))
  (:connection (:from (:box 1 :out 0)) (:to (:box 2 :in 0)))
  (:connection (:from (:box 1 :out 0)) (:to (:box 6 :in 0)))
  (:connection (:from (:box 1 :out 1)) (:to (:box 7 :in 0)))
  (:connection (:from (:box 4 :out 0)) (:to (:box 5 :in 0)))
  (:connection (:from (:box 5 :out 0)) (:to (:box 6 :in 1)))
  (:connection (:from (:box 7 :out 0)) (:to (:box 0 :in 0)))
  (:connection
   (:from (:box 7 :out 0))
   (:to (:box 5 :in 1))
   (:attributes
    (:color
     (:color-or-nil
      (:color
       (:color
        0.28239452838897705D0
        0.4515781104564667D0
        0.4928051829338074D0
        1.0D0))
      (:t-or-nil t))
     :style
     :curved-2
     :modif
     nil)))))